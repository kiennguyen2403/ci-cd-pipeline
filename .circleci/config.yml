version: 2.1
jobs:
  test_frontend:
    docker:
      - image: circleci/node:14

    working_directory: ~/repo

    steps:
      - checkout

      # Install dependencies and run tests (you can add your own tests)
      - run:
          name: Install Frontend Dependencies
          command: cd front-end && npm install
      - run:
          name: Build Frontend
          command: cd front-end && npm run build
      # - run:
      #     name: Run Frontend
      #     command: cd front-end  && npm start
      # - run:
      #     name: Wait for Server
      #     command: |
      #       while ! nc -z localhost 3000; do
      #         sleep 1
      #       done
      #     when: always
      - run:
          name: Test Frontend
          command: cd front-end  && npm test
      - save_cache:
          key: frontend-deps-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ./front-end/node_modules

      #   # Install and test the Express.js backend
      # - restore_cache:
      #     key: frontend-deps-{{ .Environment.CIRCLE_SHA1 }}
  test_backend:
    docker:
      - image: circleci/node:14

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Install Backend Dependencies
          command: cd back-end && npm install
      - run:
          name: Test Backend
          command: cd back-end && npm test
      - store_test_results:
          path: ../../../test-results

  build_application:
    docker:
      - image: cimg/node:18.18.1
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.23
          docker_layer_caching: true
      - run:
          name: Build Docker Image
          command: |
            cd front-end && docker build -t docker_app:latest .


      # - run:
      #     name: Run Docker Image
      #     command: |
      #       cd docker && docker-compose up -d
      # - run:
      #     name: Wait for Server
      #     command: |
      #       while ! nc -z localhost 3000; do
      #         sleep 1
      #       done
      #     when: always
      # - run:
      #     name: Test Integration
      #     command: |
      #       cd integration-test && npm install && npm test
      - run:
          name: Tag Docker Image
          command: |
            cd docker && docker tag docker_app:latest kiennguyendev/ci-cd:latest
      - run:
          name: Login to Docker Hub
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run:
          name: Push Docker Image
          command: |
            docker push $DOCKER_REGISTRY:latest

  deploy_infrastructure:
    docker:
      - image: hashicorp/terraform:latest

    working_directory: ~/repo

    steps:
      - checkout

      # Initialize Terraform and deploy infrastructure
      - run:
          name: Initialize Terraform
          command: |
            cd terraform
            terraform init
      - run:
          name: Deploy Infrastructure
          command: |
            cd terraform
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY terraform apply -auto-approve
  #     - run:
  #         name: Deploy Application into Infrastructure
  #         command: |
  #           cd terraform
  #           AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY terraform apply -auto-approve -target=module.app
  # deploy_application:
  #   docker:
  #     - image: amazon/aws-cli
  #   working_directory: ~/repo
  #   steps:
  #     - checkout
  #     - run:
  #         name: Deploy Application into Infrastructure
  #         command: |
  #           AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY 
workflows:
  version: 2
  test-deploy:
    jobs:
      - test_frontend:
          filters:
            branches:
              only: main
      - test_backend:
          filters:
            branches:
              only: main
      - build_application:
          requires:
            - test_frontend
            - test_backend
          filters:
            branches:
              only: main
      - deploy_infrastructure:
          requires:
            - build_application
          filters:
            branches:
              only: main
      # - deploy_application:
      #     requires:
      #       - build_application
      #     filters:
      #       branches:
      #         only: main