version: 2.1
jobs:
  build_frontend:
    docker:
      - image: circleci/node:14

    working_directory: ~/repo

    steps:
      - checkout

      # Install dependencies and run tests (you can add your own tests)
      - run:
          name: Install Frontend Dependencies
          command: cd front-end && npm install
      - run:
          name: Build Frontend
          command: cd front-end && npm run build
      - run:
          name: Run Frontend
          command: cd front-end  && npm start
      - run:
          name: Wait for Server
          command: |
            while ! nc -z localhost 3000; do
              sleep 1
            done
          when: always
      - run:
          name: Test Frontend
          command: cd front-end  && npm test
      - save_cache:
          key: frontend-deps-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ./front-end/node_modules

        # Install and test the Express.js backend
      - restore_cache:
          key: frontend-deps-{{ .Environment.CIRCLE_SHA1 }}
  build_backend:
    docker:
      - image: circleci/node:14

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Install Backend Dependencies
          command: cd back-end && npm install
      - run:
          name: Install Backend Dependencies
          command: cd back-end && npm install

      - run:
          name: Test Backend
          command: cd back-end && npm test
      - store_test_results:
          path: ../../../test-results

  deploy_infrastructure:
    docker:
      - image: hashicorp/terraform:1.2.0

    working_directory: ~/repo

    steps:
      - checkout

      # Initialize Terraform and deploy infrastructure
      - run:
          name: Initialize Terraform
          command: |
            cd terraform
            terraform init
      - run:
          name: Deploy Infrastructure
          command: |
            cd terraform
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY terraform apply -auto-approve

      # Deploy the application (you may need to customize this part)
      # - run:
      #     name: Deploy Application
      #     command: |
      #       # Replace this with your deployment script/command
      #       echo "Deploying the application..."
            
      #       # For example, you could use a script to copy the frontend build to the backend's public folder
      #       cp -r front-end/build back-end/public
            
      #       # Restart your Express.js server or use a process manager like PM2
      #       cd back-end && pm2 restart index.js
      # Deploy to AWS using Terraform (replace with your own Terraform commands)
      # - setup_remote_docker:
      #     version: 20.10.7
      # - run:
      #     name: Deploy to AWS
      #     command: |
      #       terraform init
      #       terraform apply -auto-approve


workflows:
  version: 2
  test-deploy:
    jobs:
      - build_frontend:
          filters:
            branches:
              only: main
      - build_backend:
          filters:
            branches:
              only: main
      - deploy_infrastructure:
          requires:
            - build_backend
            - build_frontend
          filters:
            branches:
              only: main
